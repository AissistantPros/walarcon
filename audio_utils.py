# -*- coding: utf-8 -*-
"""
M√≥dulo para generar audio con ElevenLabs.
Convierte texto en audio para su uso en llamadas telef√≥nicas con Twilio.
"""

import io
import logging
import asyncio
from typing import Optional
from elevenlabs import set_api_key, generate
from decouple import config

# Configuraci√≥n del sistema de logs
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Configuraci√≥n de la API Key de ElevenLabs
set_api_key(config("ELEVEN_LABS_API_KEY"))

# ==================================================
# üîπ Generaci√≥n de audio con ElevenLabs
# ==================================================
async def generate_audio_with_eleven_labs(text: str) -> Optional[io.BytesIO]:
    """
    Convierte un texto en audio usando ElevenLabs.

    Par√°metros:
        text (str): El texto que se convertir√° en audio.

    Retorna:
        Optional[io.BytesIO]: Un buffer de audio en formato MP3 si la conversi√≥n es exitosa, de lo contrario None.
    """
    try:
        # Validaci√≥n: El texto no debe estar vac√≠o
        if not text.strip():
            raise ValueError("El texto para generar audio est√° vac√≠o.")

        logger.info("üó£Ô∏è Generando audio con ElevenLabs...")

        # Generar audio con ElevenLabs (sin necesidad de `asyncio.to_thread()`)
        audio_stream = await generate(
            text=text,
            voice=config("ELEVEN_LABS_VOICE_ID"),
            model="eleven_multilingual_v2",
            stability=0.3,        # M√°s expresividad y menos monoton√≠a
            similarity_boost=0.8, # Permite m√°s variabilidad en la voz
            style=0.5,
            speed=1.8,            # Ajustado para mejor naturalidad
            use_speaker_boost=True # Activa el boost de expresividad
        )

        # Verificar si hay contenido en el stream
        if not audio_stream:
            raise Exception("El stream de audio est√° vac√≠o.")

        # Buffer para almacenar el audio
        buffer = io.BytesIO()
        buffer.write(audio_stream)
        buffer.seek(0)

        logger.info("‚úÖ Audio generado con √©xito")
        return buffer

    except ValueError as ve:
        logger.warning(f"‚ö†Ô∏è Error de validaci√≥n en generaci√≥n de audio: {str(ve)}")
        return None
    except Exception as e:
        logger.error(f"‚ùå Error en ElevenLabs al generar audio: {str(e)}")
        return None
